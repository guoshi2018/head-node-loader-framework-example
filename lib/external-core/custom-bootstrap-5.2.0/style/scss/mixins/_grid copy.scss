// Grid system
//
// Generate semantic grid columns with these mixins.
@use "variables" as *;
@use "sundry" as *;
@use "mixins/breakpoints" as *;
@use "functions" as *;
@use "maps" as *;
@use "spaces";

// 各个item平分row的剩余空间
@mixin -make-col($size: false, $columns: $grid-columns, $vertical-row: false) {
  @if $size {
    flex: 0 0 auto;
    $p: percentage(divide($size, $columns));
    @if $vertical-row == true {
      height: $p;
    } @else {
      width: $p;
    }
  } @else {
    flex: 1 1 0;
    @if $vertical-row == true {
      height: 100%;
    } @else {
      width: 100%;
    }
  }
}

// 尺寸由item自身内容确定
@mixin -make-col-auto($vertical-row: false) {
  flex: 0 0 auto;
  @if $vertical-row == true {
    height: auto;
  } @else {
    width: auto;
  }
}

// 为当前item偏移一段距离
@mixin -make-col-offset($size, $columns: $grid-columns, $vertical-row: false, $reverse: false) {
  $num: divide($size, $columns);
  $gap: if($num ==0, 0, percentage($num));

  @if $vertical-row == true and $reverse == true {
    // column-reserve
    margin-bottom: $gap;
  } @else if $vertical-row == true and $reverse == false {
    // column
    margin-top: $gap;
  } @else if $vertical-row == false and $reverse == true {
    // row-reserve
    margin-right: $gap;
  } @else {
    // row
    margin-left: $gap;
  }
}

// Row columns
//
// Specify on a parent element(e.g., .row) to force immediate children into NN
// number of columns. Supports wrapping to new lines, but does not do a Masonry
// style grid.
@mixin -row-cols($count, $vertical-row: false) {
  > * {
    flex: 0 0 auto;
    $p: divide(100%, $count);
    @if $vertical-row == true {
      height: $p;
    } @else {
      width: $p;
    }
  }
}

@mixin make-row($gutter-x: $grid-gutter-width, $gutter-y: $grid-gutter-height, $vertical-row: false, $reverse: false) {
  --#{$prefix}gutter-x: #{$gutter-x};
  --#{$prefix}gutter-y: #{$gutter-y};
  display: flex;
  flex-wrap: wrap;
  //overflow: auto;

  // 水平/竖直, 正向/逆向 网格切换
  @if $vertical-row == true and $reverse == true {
    flex-direction: column-reverse;
  } @else if $vertical-row == true and $reverse == false {
    flex-direction: column;
  } @else if $vertical-row == false and $reverse == true {
    flex-direction: row-reverse;
  } @else {
    flex-direction: row;
  }

  // TODO: Revisit calc order after https://github.com/react-bootstrap/react-bootstrap/issues/6039 is fixed
  //margin-top: calc(-1 * var(--#{$prefix}gutter-y)); // stylelint-disable-line function-disallowed-list
  margin-right: calc(-0.5 * var(--#{$prefix}gutter-x)); // stylelint-disable-line function-disallowed-list
  margin-left: calc(-0.5 * var(--#{$prefix}gutter-x)); // stylelint-disable-line function-disallowed-list
  //添加底部的负margin, 与margin-top对称
  margin-top: calc(-0.5 * var(--#{$prefix}gutter-y));
  margin-bottom: calc(-0.5 * var(--#{$prefix}gutter-y));

  @include spaces.make-gutters;
}

@mixin make-col-ready($vertical-row: false) {
  // Add box sizing if only the grid is loaded
  box-sizing: if(variable-exists(include-column-box-sizing) and $include-column-box-sizing, border-box, null);
  // Prevent columns from becoming too narrow when at smaller grid tiers by
  // always setting `width: 100%;`. This works because we set the width
  // later on to override this initial width.
  //@debug $include-column-box-sizing, ---------------------------------;
  flex-shrink: 0;
  @if $vertical-row == true {
    height: 100%;
    max-height: 100%;
  } @else {
    width: 100%;
    max-width: 100%; // Prevent `.col-auto`, `.col` (& responsive variants) from breaking out the grid
  }

  // 应该将margin的补偿, 全部采用item的padding, 方能适应在竖向flex时的响应性
  // 注意, 如果使用margin补偿, 竖向排列的flex布局, offset-mq-(1,2,3...)更正将需要考虑此gutter的影响
  // 而使用padding,能达到一样的效果, 却可以简化更正逻辑
  $px: calc(var(--#{$prefix}gutter-x) * 0.5);
  $py: calc(var(--#{$prefix}gutter-y) * 0.5);
  padding-left: $px;
  padding-right: $px;
  padding-top: $py;
  padding-bottom: $py;

  overflow: auto;
}
// Framework grid generation
//
// Used only by Bootstrap to generate the correct number of grid classes given
// any value of `$grid-columns`.

@mixin make-grid-columns(
  $columns: $grid-columns,
  $gutter: $grid-gutter-width,
  $breakpoints: $grid-breakpoints,
  $vertical-row: false,
  $reverse: false
) {
  @each $breakpoint in map-keys($breakpoints) {
    $infix: breakpoint-infix($breakpoint, $breakpoints);

    @include media-breakpoint-up($breakpoint, $breakpoints) {
      // Provide basic `.col-{bp}` classes for equal-width flexbox columns
      > .col#{$infix} {
        //flex: 1 0 0%; // Flexbugs #4: https://github.com/philipwalton/flexbugs#flexbug-4
        // 当作为.row-cols-mq-auto的item时, 可保持其均分剩余空间的特点
        flex: 1 0 0% !important;
      }

      &.row-cols#{$infix}-auto > * {
        @include -make-col-auto($vertical-row);
      }

      @if $grid-row-columns >0 {
        @for $i from 1 through $grid-row-columns {
          &.row-cols#{$infix}-#{$i} {
            @include -row-cols($i, $vertical-row);
          }
        }
      }

      > .col#{$infix}-auto {
        @include -make-col-auto($vertical-row);
      }

      @if $columns >0 {
        @for $i from 1 through $columns {
          > .col#{$infix}-#{$i} {
            @include -make-col($i, $columns, $vertical-row);
          }
        }

        // `$columns - 1` because offsetting by the width of an entire row isn't possible
        @for $i from 0 through ($columns - 1) {
          @if not($infix == "" and $i ==0) {
            // Avoid emitting useless .offset-0
            > .offset#{$infix}-#{$i} {
              @include -make-col-offset($i, $columns, $vertical-row, $reverse);
            }
          }
        }
      }

      // Gutters
      // 已迁移
      // Make use of `.g-*`, `.gx-*` or `.gy-*` utilities to change spacing between the columns.
      // @each $key, $value in $gutters {
      //   &.g#{$infix}-#{$key},
      //   &.gx#{$infix}-#{$key} {
      //     --#{$prefix}gutter-x: #{$value};
      //   }

      //   &.g#{$infix}-#{$key},
      //   &.gy#{$infix}-#{$key} {
      //     --#{$prefix}gutter-y: #{$value};
      //   }
      // }
    }
  }
}

@mixin make-cssgrid($columns: $grid-columns, $breakpoints: $grid-breakpoints) {
  @each $breakpoint in map-keys($breakpoints) {
    $infix: breakpoint-infix($breakpoint, $breakpoints);

    @include media-breakpoint-up($breakpoint, $breakpoints) {
      @if $columns >0 {
        @for $i from 1 through $columns {
          .g-col#{$infix}-#{$i} {
            grid-column: auto / span $i;
          }
        }

        // Start with `1` because `0` is and invalid value.
        // Ends with `$columns - 1` because offsetting by the width of an entire row isn't possible.
        // 其实还是可以取值 $columns.
        @for $i from 1 through $columns {
          .g-start#{$infix}-#{$i} {
            grid-column-start: $i;
          }
        }
      }
    }
  }
}
