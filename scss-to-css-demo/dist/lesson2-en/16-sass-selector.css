@charset "UTF-8";
/*
selector.is-superselector($super, $sub)
is-superselector($super, $sub) //=> boolean 
Returns whether the selector $super matches all the elements 
that the selector $sub matches.

Still returns true even if $super matches more elements than $sub.
The $super and $sub selectors may contain placeholder selectors, 
but not parent selectors.
简言之, $super是否全包含$sub
*/
/*
selector.append($selectors...)
selector-append($selectors...) //=> selector 
Combines $selectors without descendant combinators—that is, without whitespace between them.

If any selector in $selectors is a selector list, each complex selector is combined separately.

The $selectors may contain placeholder selectors, but not parent selectors.
简言之, 将前后选择器作为字符串, 简单连接起来. 某个选择器是选择器列表时, 则执行逐个连接
*/
/*
selector.nest($selectors...)
selector-nest($selectors...) //=> selector 
Combines $selectors as though they were nested within one 
another in the stylesheet.

The $selectors may contain placeholder selectors. Unlike other 
selector functions, all of them except the first may also contain parent selectors.
简言之, 各选择器依次以上下级关系连接, 中间以空格隔开, 以示祖孙关系
*/
/*
selector.parse($selector)
selector-parse($selector) //=> selector 
Returns $selector in the selector value format.
*/
/*
selector.replace($selector, $original, $replacement)
selector-replace($selector, $original, $replacement) //=> selector 
Returns a copy of $selector with all instances of $original 
replaced by $replacement.

This uses the @extend rule’s intelligent unification to make sure 
$replacement is seamlessly integrated into $selector. If $selector 
doesn’t contain $original, returns it as-is.

The $selector, $original, and $replacement selectors may contain 
placeholder selectors, but not parent selectors.
*/
/*
selector.unify($selector1, $selector2)
selector-unify($selector1, $selector2) //=> selector | null 
Returns a selector that matches only elements matched by both 
$selector1 and $selector2.

Returns null if $selector1 and $selector2 don’t match any of 
the same elements, or if there’s no selector that can express their overlap.

Like selectors generated by the @extend rule, the returned selector 
isn’t guaranteed to match all the elements matched by both $selector1 
and $selector2 if they’re both complex selectors.
简言之, 返回两个选择器的交集选择器
*/
/*
selector.simple-selectors($selector)
simple-selectors($selector) //=> list 
Returns a list of simple selectors in $selector.

The $selector must be a single string that contains a compound 
selector. This means it may not contain combinators (including spaces) or commas.

The returned list is comma-separated, and the simple selectors are unquoted strings.
*/ /*# sourceMappingURL=16-sass-selector.css.map */
