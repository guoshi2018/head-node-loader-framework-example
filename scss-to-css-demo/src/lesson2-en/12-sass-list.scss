@use "sass:list";
/*
In Sass, every map counts as a list that contains a two-element list 
for each key/value pair. For example, (1: 2, 3: 4) counts as 
(1 2, 3 4). So all these functions work for maps as well!

Individual values also count as lists. All these functions treat 1px 
as a list that contains the value 1px.
*/

/*
list.append($list, $val, $separator: auto)
append($list, $val, $separator: auto) //=> list 
Returns a copy of $list with $val added to the end.

$separator的允许值: 逗号 空格 斜杆 , 将替换原有的分隔符
$separator的默认值: $list带有分隔符, 则采用该分隔符; 不带,则采用空格
*/
@debug list.append(10px 20px, 30px); // 10px 20px 30px
@debug list.append((blue, red), green); // blue, red, green
@debug list.append(10px 20px, 30px 40px); // 10px 20px (30px 40px)
@debug list.append(10px, 20px, $separator: comma); // 10px, 20px
@debug list.append((blue, red), green, $separator: space); // blue red green

/*
list.index($list, $value)
index($list, $value) //=> number | null 

Returns the index of $value in $list.
If $value doesn’t appear in $list, this returns null. 
If $value appears multiple times in $list, this returns 
the index of its first appearance.
*/
@debug list.index(1px solid red, 1px); // 1
@debug list.index(1px solid red, solid); // 2
@debug list.index(1px solid red, dashed); // null

/*
list.is-bracketed($list)
is-bracketed($list) //=> boolean 
Returns whether $list has square brackets.只看最外层
*/
@debug list.is-bracketed(1px 2px 3px); // false
@debug list.is-bracketed([1px, 2px, 3px]); // true
@debug list.is-bracketed(1px [2px, 3px, 4px] 5px); //false

/*
list.join($list1, $list2, $separator: auto, $bracketed: auto)
join($list1, $list2, $separator: auto, $bracketed: auto) //=> list 
Returns a new list containing the elements of $list1 followed by the elements of $list2.
*/
@debug list.join(10px 20px, 30px 40px); // 10px 20px 30px 40px
@debug list.join((blue, red), (#abc, #def)); // blue, red, #abc, #def
@debug list.join(10px, 20px); // 10px 20px
@debug list.join(10px, 20px, $separator: comma); // 10px, 20px
@debug list.join((blue, red), (#abc, #def), $separator: space); // blue red #abc #def
@debug list.join([10px], 20px); // [10px 20px]
@debug list.join(10px, 20px, $bracketed: true); // [10px 20px]

/*
list.length($list)
length($list) //=> number 
Returns the length of $list.
This can also return the number of pairs in a map.
*/
@debug list.length(10px); // 1
@debug list.length(10px 20px 30px); // 3
@debug list.length(
	(
		width: 10px,
		height: 20px,
	)
); // 2

/*
list.separator($list)
list-separator($list) //=> unquoted string 

Returns the name of the separator used by $list, either space, comma, or slash.
If $list doesn’t have a separator, returns space.
*/
@debug list.separator(1px 2px 3px); // space
//@debug list.separator(1px, 2px, 3px); // error: Only 1 argument allowed, but 3 were passed.
@debug list.separator((1px, 2px, 3px)); //comma
@debug list.separator("Helvetica"); // space
@debug list.separator(()); // space

/*
list.nth($list, $n)
nth($list, $n) 

Returns the element of $list at index $n.
If $n is negative, it counts from the end of $list. Throws an error if 
there is no element at index $n.
*/
@debug list.nth(10px 12px 16px, 2); // 12px
@debug list.nth([line1, line2, line3], -1); // line3

/*
list.set-nth($list, $n, $value)
set-nth($list, $n, $value) //=> list 

Returns a copy of $list with the element at index $n replaced with $value.
If $n is negative, it counts from the end of $list. Throws an error if 
there is no existing element at index $n.
*/
@debug list.set-nth(10px 20px 30px, 1, 2em); // 2em 20px 30px
@debug list.set-nth(10px 20px 30px, -1, 8em); // 10px, 20px, 8em
@debug list.set-nth((Helvetica, Arial, sans-serif), 3, Roboto); // Helvetica, Arial, Roboto
//@debug list.set-nth([1, 2, 3, 4], 5, "hoo"); //Error: $n: Invalid index 5
//@debug list.set-nth([1, 2, 3, 4], -5, "bar"); //Error: $n: Invalid index -5
@debug list.set-nth([1, 2, 3, 4], 3, "hoo"); //[1,2,"hoo",4]
@debug list.set-nth([1, 2, 3, 4], -3, bar); //[1,bar,3,4]
//@debug list.set-nth([1, 2, 3, , 4 ], 4, "hello"); //Error: Expected expression.

/*
list.slash($elements...) //=> list 
Returns a slash-separated list that contains $elements.
*/
@debug list.slash(1px, 50px, 100px); // 1px / 50px / 100px

/*
list.zip($lists...)
zip($lists...) //=> list 
Combines every list in $lists into a single list of sub-lists.

Each element in the returned list contains all the elements at 
that position in $lists. The returned list is as long as the 
shortest list in $lists.

The returned list is always comma-separated and the sub-lists 
are always space-separated.
*/
@debug list.zip(10px 50px 100px, short mid long); // 10px short, 50px mid, 100px long
@debug list.zip(10px 50px 100px, short mid); // 10px short, 50px mid
