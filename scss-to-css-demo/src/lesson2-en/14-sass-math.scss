@use "sass:math";

@debug math.$e;
@debug math.$pi;
@debug math.ceil(4); // 4
@debug math.ceil(4.2); // 5
@debug math.ceil(4.9); // 5

@debug math.clamp(-1, 0, 1); // 0  将给定值固定在min,max之间,必要时调整为min或max
@debug math.clamp(1px, -1px, 10px); // 1px
@debug math.clamp(-1in, 1cm, 10mm); // 10mm
@debug math.clamp(100, 30, 0); //100. 只要min>max, 则永远返回min
@debug math.clamp(100, 101, 0); //100
@debug math.clamp(100, 1000, 0); //100
@debug math.clamp(100, -200, 0); //100
@debug math.clamp(100, 0, 0); //100

@debug math.floor(4); // 4
@debug math.floor(4.2); // 4
@debug math.floor(4.9); // 4

@debug math.max(1px, 4px); // 4px
$widths: 50px, 30px, 100px;
@debug math.max($widths...); // 100px

@debug math.min(1px, 4px); // 1px
$widths: 50px, 30px, 100px;
@debug math.min($widths...); // 30px

@debug math.round(4); // 4
@debug math.round(4.2); // 4
@debug math.round(4.9); // 5

@debug math.abs(10px); // 10px
@debug math.abs(-10px); // 10px

@debug math.hypot(3, 4); // 5  平方根
$lengths: 1in, 10cm, 50px;
@debug math.hypot($lengths...); // 4.0952775683in

@debug math.log(10); // 2.302585093 默认为自然对数,相当于下式
@debug math.log(10, math.$e); // 2.302585093
@debug math.log(10, 10); // 1

@debug math.pow(10, 2); //100
@debug math.pow(100, math.div(1, 3)); // 4.6415888336
@debug math.pow(5, -2); // 0.04

@debug math.sqrt(100); // 10
@debug math.sqrt(math.div(1, 3)); // 0.5773502692
@debug math.div(1, math.sqrt(3)); //等于上式
@debug math.sqrt(-1); // NaN

@debug math.cos(100deg); // -0.1736481777
@debug math.cos(1rad); // 0.5403023059
@debug math.cos(1); // 0.5403023059  默认单位是 rad

@debug math.sin(100deg); // 0.984807753
@debug math.sin(1rad); // 0.8414709848
@debug math.sin(1); // 0.8414709848

@debug math.tan(100deg); // -5.6712818196
@debug math.tan(1rad); // 1.5574077247
@debug math.tan(1); // 1.5574077247

@debug math.acos(0.5); // 60deg 反余弦
@debug math.acos(2); // NaNdeg

@debug math.asin(0.5); // 30deg 反正弦
@debug math.asin(2); // NaNdeg

@debug math.atan(10); // 84.2894068625deg
@debug math.atan2(-1, 1); // -45deg

/*
math.compatible($number1, $number2)
comparable($number1, $number2) //=> boolean 

Returns whether $number1 and $number2 have compatible units.

If this returns true, $number1 and $number2 can safely be 
added, subtracted, and compared. Otherwise, doing so will produce errors.
*/
@debug math.compatible(2px, 1px); // true
@debug math.compatible(100px, 3em); // false
@debug math.compatible(10cm, 3mm); // true
@debug math.compatible(2.8mm, 101in);

@debug math.is-unitless(100); // true
@debug math.is-unitless(100px); // false

@debug math.unit(100); // ""
@debug math.unit(100px); // "px"
@debug math.unit(5px * 10px); // "px*px"
@debug math.unit(math.div(5px, 1s)); // "px/s"

@debug math.div(1, 2); // 0.5
@debug math.div(100px, 5px); // 20
@debug math.div(100px, 5); // 20px
@debug math.div(100px, 5s); // 20px/s
@debug math.div(100, 20s); // 5/s

@debug math.percentage(0.2); // 20%
@debug math.percentage(math.div(100px, 50px)); // 200%

@debug math.random(); // range[0,1] 小数
@debug math.random(); // range[0,1] 小数
@debug math.random(1); // range[1,1] = 1 整数
@debug math.random(2); // range[1,1.2] 整数
//@debug math.random(23.2); //Error: $limit: 23.2 is not an int.
@debug math.random(1001);
